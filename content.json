{"pages":[{"title":"about","text":"CreditIcons made by Freepik from www.flaticon.com is licensed by CC 3.0 BY","link":"/about/index.html"},{"title":"AWS Toolbox","text":"index AWS CLI IAM EC2 CloudWatch Infrastructure As Code Official NoSQL Workbench for Amazon DynamoDB brew cask install nosql-workbench-for-amazon-dynamodb 每月成本簡易計算器 TCO 計算器 SDK Python - Boto 3 JavaScript Java Third Party CIDR to IPv4 Conversion AWS Vault aws2-wrap SSO dynamodump 資料備份、匯入、匯出 Diagram AWS 架構圖示 Draw.io - AWS19 CloudMapper Reference Classless Inter-Domain Routing Use Parameter Store to Securely Access Secrets and Config Data in AWS CodeDeploy The Right Way to Store Secrets using Parameter Store DynamoDB Cheatsheet – Everything you need to know about Amazon Dynamo DB for the 2020 AWS Certified Developer Associate Certification","link":"/aws/index.html"},{"title":"news","text":"Best of JavaScript","link":"/news/index.html"},{"title":"工具百寶箱","text":"Mac 環境設定 IDE crontab badges/shields Static Site Generator MkDocs Hexo VuePress GitBook","link":"/tools/index.html"},{"title":"practice","text":"VIM CheckiO: Python and JavaScript Cyber-Dojo JavaScript, Java, Python, PHP, Ruby and many more missing-semester/missing-semester Coding Games and Programming Challenges to Code Better exercism How to GraphQL - The Fullstack Tutorial for GraphQL GitHub Learning Lab Backend CodeGym.cc Java Front End ⭐️ Interactive JavaScript Quiz #1 lydiahallie/javascript-questions Learn CSS Grid - A Guide to Learning CSS Grid Layout | Jonathan Suh Screeps JavaScript Building a chat app with React.js and Chatkit Interneting Is Hard CodeTime kdchang/reactjs101 Reference Learn To Code By Playing These Games Temp Ruby warrior: Ruby 30 Days, 30 Sites #100DaysOfX Challenges #100DaysOfCode Developer Hackathons &amp; Programming Challenges | Technical Recruitment &amp; Innovation Management Software | HackerEarth Why I coded every day for a year, what I learned, and how you can do it, too. make-a-website","link":"/practice/index.html"},{"title":"教學文件","text":"training repo 2019 Markdown 教學, slide Twilio Chat, slide React 教學, slide 2018 VSCode 教學, slide 2017 One Day Resolutions | Codecademy","link":"/training/index.html"},{"title":"AWS CLI","text":"https://aws.amazon.com/tw/cli/ 設定來源 CLI 環境變數 CLI 設定檔 Shared Credential 設定檔 設定檔預設位於 ~/.aws/config Credentials 環境變數 Shared Credential File CLI 設定檔 Shared Credentials File設定檔預設位於 ~/.aws/credentials，格式為 INI，僅能設定 aws_access_key_id, aws_secret_access_key, aws_session_token IAM12aws iam list-instance-profiles --profile vincentliuaws iam delete-instance-profile --instance-profile-name instance-profile-name --profile vincentliu EC2123aws ec2 describe-instances \\ --instance-ids i-0ca536f88d5672bfb i-0876decb55371d4eb \\ --profile VincentLiu CodeDeploy12345678aws deploy list-applicationsaws deploy list-application-revisions --application-name freebird-nodeaws deploy get-application --application-name freebird-nodeaws deploy get-deployment-group \\ --application-name freebird-node \\ --deployment-group-name develop NoteCommand Complete","link":"/aws/cli/index.html"},{"title":"","text":"CloudFormationIssues1Cannot delete entity, must remove roles from instance profile first. (Service: AmazonIdentityManagement; Status Code: 409; Error Code: DeleteConflict; Request ID: 5a03b5d2-7e17-4665-ad27-0d1af3ecc428)","link":"/aws/cloudformation/index.html"},{"title":"AWS EC2","text":"https://docs.aws.amazon.com/zh_tw/AWSEC2/latest/UserGuide/AccessingInstancesLinux.htmlhttps://docs.aws.amazon.com/zh_tw/AWSEC2/latest/UserGuide/connection-prereqs.htmlhttps://docs.aws.amazon.com/zh_tw/AWSEC2/latest/UserGuide/authorizing-access-to-an-instance.html 12345678910111213141516171819202122# ssh -i /path/my-key-pair.pem my-instance-user-name@my-instance-public-dns-namechmod 400 ~/.ssh/keys/vincentliu.pem# Amazon Linux 2, Amazon Linux AMIssh -v -i \"~/.ssh/keys/vincentliu.pem\" ec2-user@ec2-100-26-167-218.compute-1.amazonaws.comssh -v -i \"~/.ssh/keys/vincentliu.pem\" ec2-user@ec2-100-26-167-218.compute-1.amazonaws.com# CentOS AMIssh -v -i \"~/.ssh/keys/vincentliu.pem\" centos@ec2-100-26-167-218.compute-1.amazonaws.comssh -v -i \"~/.ssh/keys/vincentliu.pem\" ubuntu@ec2-100-26-167-218.compute-1.amazonaws.com# Debian AMIssh -v -i \"~/.ssh/keys/vincentliu.pem\" admin@ce2-54-144-250-237.compute-1.amazonaws.comssh -v -i \"~/.ssh/keys/vincentliu.pem\" root@ec2-100-26-167-218.compute-1.amazonaws.com# Fedora AMIssh -v -i \"~/.ssh/keys/vincentliu.pem\" ec2-user@ce2-54-144-250-237.compute-1.amazonaws.comssh -v -i \"~/.ssh/keys/vincentliu.pem\" fedora@ec2-100-26-167-218.compute-1.amazonaws.com# RHEL AMIssh -v -i \"~/.ssh/keys/vincentliu.pem\" ec2-user@ec2-100-26-167-218.compute-1.amazonaws.comssh -v -i \"~/.ssh/keys/vincentliu.pem\" root@ec2-100-26-167-218.compute-1.amazonaws.com# SUSE AMIssh -v -i \"~/.ssh/keys/vincentliu.pem\" ec2-user@ec2-100-26-167-218.compute-1.amazonaws.comssh -v -i \"~/.ssh/keys/vincentliu.pem\" root@ec2-100-26-167-218.compute-1.amazonaws.com# Ubuntu AMIssh -v -i \"~/.ssh/keys/vincentliu.pem\" ubuntu@ec2-100-26-167-218.compute-1.amazonaws.com 1234debug1: Server host key: ecdsa-sha2-nistp256 SHA256:QKXoY/KtWTju/tacNwXvplOL18GbgwIhKcOgxNBYq9sThe authenticity of host &apos;34.204.201.221 (34.204.201.221)&apos; can&apos;t be established.ECDSA key fingerprint is SHA256:QKXoY/KtWTju/tacNwXvplOL18GbgwIhKcOgxNBYq9s.Are you sure you want to continue connecting (yes/no/[fingerprint])? yes 設定1234567891011sudo yum updateservice --status-all | lessservice --status-all | grep ntpdservice --status-all | grep ssmservice --status-all | grep agentchkconfig --list | less | column -t -s, | less -S# portnetstat -tulpn 概念 AMI Template: 軟體設定、Server、應用程式 Instance: 由 Template 啟動的虛擬 Server free tier AMI Amazon Linux AMI 2018.03.0 (HVM), SSD Volume Type - ami-09d8b5222f2b93bf0 Amazon Linux 2 AMI (HVM), SSD Volume Type - ami-02354e95b39ca8dec (64-bit x86) / ami-0c5bf07e510b75b11 (64-bit Arm) Ubuntu Server 20.04 LTS (HVM), SSD Volume Type - ami-0d57c0143330e1fa7 (64-bit x86) / ami-05f126563b93d66c6 (64-bit Arm) Ubuntu Server 16.04 LTS (HVM), SSD Volume Type - ami-0a0ddd875a1ea2c7f (64-bit x86) / ami-0b786a1a999c4e98e (64-bit Arm) Ubuntu Server 18.04 LTS (HVM), SSD Volume Type - ami-0ac80df6eff0e70b5 (64-bit x86) / ami-0d221091ef7082bcf (64-bit Arm) Red Hat Enterprise Linux 8 (HVM), SSD Volume Type - ami-098f16afa9edf40be (64-bit x86) / ami-029ba835ddd43c34f (64-bit Arm) SUSE Linux Enterprise Server 12 SP5 (HVM), SSD Volume Type - ami-095d73d5068ebbc22 SUSE Linux Enterprise Server 15 SP1 (HVM), SSD Volume Type - ami-0e0fcf63653340b66 (64-bit x86) / ami-05dde7e9c924be7dc (64-bit Arm) Security Group 盤點沒在使用的 SG Find Resources Associated With an Amazon EC2 Security Group aws ec2 describe-network-interfaces --filters Name=group-id,Values=&lt;group-id&gt; --region &lt;region&gt; --output json EC2 Console &gt; Security Group Id EC2 Console &gt; Network Interfaces &gt; search Security Group Id AMIhttps://aws.amazon.com/tw/blogs/aws/update-on-amazon-linux-ami-end-of-life/ 1cat /etc/image-id User Data 會以 root 身份執行，處理後會存放在 /var/lib/cloud/instances/instance-id/ instance 查看 user data curl http://169.254.169.254/latest/user-data 安裝 SSM Agent： 2017.09 之後的 AMI 已預設安裝，下列僅適用 Intel (x86_64)，給 EC2 的 user data 12345678910111213141516#!/bin/bash# install SSM Agentyum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm# start SSM Agentstart amazon-ssm-agent# check statusstatus amazon-ssm-agent# using proxy https://docs.aws.amazon.com/zh_tw/systems-manager/latest/userguide/sysman-proxy-with-ssm-agent.htmlecho -e \"env http_proxy=http://proxy.com:3128\\nenv https_proxy=http://proxy.com:3128\\nenv no_proxy=169.254.169.254\" | tee /etc/init/amazon-ssm-agent.overridestop amazon-ssm-agentstart amazon-ssm-agent EC2 Auto Scaling Components Groups: 一群 EC2，scaling 及管理的單位 minimum: 最少數量 maximum: 最多數量 desired capacity: 預期數量 scaling policy: 依照需求 Configuration templates: EC2 instance Scaling options 手動 scaling policy 排程 Auto Scaling LifecycleEC2 Auto Scaling - Getting Started create a launch template for an Auto Scaling group AMI ID create a launch configuration Create Auto Scaling group: Create a new launch configuration Verify Your Auto Scaling Group Terminate an Instance in Your Auto Scaling Group Delete Your Scaling Infrastructure delete Auto Scaling group delete launch template delete launch configuration Tutorial: Set Up a Scaled and Load-Balanced ApplicationTODO Auto Scaling GroupsUsing a Load Balancer with an Auto Scaling GroupASG 啟動或終止的 instance 會自動由 target group 註冊或取消註冊 logs /var/log/cloud-init.log /var/log/cloud-init-output.log","link":"/aws/ec2/index.html"},{"title":"","text":"CodeDeployLog agent log: /var/log/aws/codedeploy-agent/codedeploy-agent.log agent install, update log: /tmp/codedeploy-agent.update.log deployment log: /opt/codedeploy-agent/deployment-root/deployment-logs/codedeploy-agent-deployments.log Appspec script log: /opt/codedeploy-agent/deployment-root/deployment-group-ID/deployment-ID/logs/scripts.log scripts前一次 depolyment script 失敗時使用 1234cd /opt/codedeploy-agent/deployment-root/rm -rf *less /opt/codedeploy-agent/deployment-root/deployment-logs/codedeploy-agent-deployments.log","link":"/aws/codedeploy/index.html"},{"title":"AWS Identity and Access Management - IAM","text":"免費服務，用來控管可存取的 AWS 資源 root user: 具備無敵權限，通常用來建立 IAM useriam user: 日常維運使用者或應用程式 Terms AWS Services That Work with IAM IAM Best Practices IAM Policy Simulator","link":"/aws/iam/index.html"},{"title":"AWS Infrastructure As Code","text":"Cloud Development Kit(CDK) Cloud​Formation Terraform","link":"/aws/iac/index.html"},{"title":"","text":"VPC VPC: 帳號內的虛擬網路，隔離於其他的虛擬網路 subnet: IP 範圍，public 可與 internet 溝通，private 無法與 internet 溝通，subnet 可透過 ACL 格離 route table: 控制 network traffic internet gateway: 讓 VPC 跟 internet 溝通 VPC endpoint: 讓 VPC 跟 AWS 服務溝通 Reference https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html 計價","link":"/aws/vpc/index.html"},{"title":"","text":"FrontEnd Tools Rome webpack、eslint、prettier、babel webpack","link":"/tools/frontend/index.html"},{"title":"","text":"Cloudwatch設定12# proxysudo vim /etc/yum.conf IAM Role1234567891011121314151617{ \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Action\": [ \"logs:CreateLogGroup\", \"logs:CreateLogStream\", \"logs:PutLogEvents\", \"logs:DescribeLogStreams\" ], \"Resource\": [ \"arn:aws:logs:*:*:*\" ] } ]} 安裝 CLOUDWATCH LOGS AGENT123456789101112131415# 下載並單獨執行cd ~curl https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py -Ocurl https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/AgentDependencies.tar.gz -Otar xvf AgentDependencies.tar.gz -C /tmp/sudo python ./awslogs-agent-setup.py --region ap-northeast-1 --dependency-path /tmp/AgentDependencies # enter 就好# optional: proxy 設定sudo vim /var/awslogs/etc/proxy.conf/var/awslogs/bin/awslogs-version.sh | less # 版本查詢sudo service awslogs start # 啟動 awslogs 服務sudo chkconfig awslogs on # 每次系統啟動時啟動 awslogs 服務ps -ef|grep awslog # 檢查process是否有啟動less /var/log/awslogs.log 12345# Linux 2: systemctl start awslogsdservice awslogs status # /etc/init.d/awslogs statusservice awslogs stop # /etc/init.d/awslogs stopservice awslogs start # /etc/init.d/awslogs startservice awslogs restart # /etc/init.d/awslogs restart Log /var/awslogs/etc/awslogs.conf /var/awslogs/etc/aws.conf 地區設定 /var/awslogs/etc/ /var/log/awslogs.log /var/log/awslogs-agent-setup.log Reference Quick Start: Install and Configure the CloudWatch Logs Agent on a Running EC2 Linux Instance CloudWatch Logs Agent Reference","link":"/aws/cloudwatch/index.html"},{"title":"","text":"Command Line Toolsyqrepo 12345678# Yaml to Jsonyq r -j sample.yamlyq r --prettyPrint -j sample.yaml# Json to Yamlyq r --prettyPrint sample.jsonyq v sample.yamlyq compare data1.yaml data2.yaml","link":"/tools/cli/index.html"},{"title":"library 百寶箱","text":"Front End SheetJS/sheetjs TarekRaafat/autoComplete.js swup/swup Single Page Apps for GitHub Pages MetricsGraphics.js - a library based on D3.js, optimized for visualizing and laying out time-series data Apache ECharts (incubating) Chart.js | Open source HTML5 Charts for your website d3/d3 mermaid-js/mermaid Rough.js microsoft/monaco-editor rexxars/react-markdown iview/iview ianstormtaylor/slate rich text editors Vue Vue Design System Vue Design System _ Viljami Salminen Java Joda-Time Project Lombok","link":"/tools/library/index.html"},{"title":"Mac 環境設定","text":"Homebrew12345678910# cli: brew install &lt;package&gt;# gui: brew cask install &lt;package&gt;brew install cloc git bat exa jq fdbrew install pandoc mkdocsbrew cask install iterm2 eclipse-jee jd-guibrew search pythonbrew info pythonbrew switch python 3.6.5 bat cat(1) with syntax highlighting exa A modern replacement for ls jq command-line JSON processor zsh-autosuggestions Node.jsNVM 依照指示做安裝, Homebrew 尚不支援 JavaJDKJDK7 要手動下載及安裝 123456789101112131415161718192021222324252627brew tap caskroom/versionsbrew cask install java java6 java8ls /Library/Java/JavaVirtualMachines/&gt; 1.6.0.jdk jdk1.7.0_80.jdk jdk1.8.0_202.jdk openjdk-12.jdk/usr/libexec/java_home -V&gt; Matching Java Virtual Machines (5):&gt; 12, x86_64: \"OpenJDK 12\" /Library/Java/JavaVirtualMachines/openjdk-12.jdk/Contents/Home&gt; 1.8.0_202, x86_64: \"Java SE 8\" /Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home&gt; 1.7.0_80, x86_64: \"Java SE 7\" /Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home&gt; 1.6.0_65-b14-468, x86_64: \"Java SE 6\" /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home&gt; 1.6.0_65-b14-468, i386: \"Java SE 6\" /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home# 設定 ~/.zshrcexport JAVA_6_HOME=$(/usr/libexec/java_home -v1.6)export JAVA_7_HOME=$(/usr/libexec/java_home -v1.7)export JAVA_8_HOME=$(/usr/libexec/java_home -v1.8)export JAVA_12_HOME=$(/usr/libexec/java_home -v12)alias java6='export JAVA_HOME=$JAVA_6_HOME'alias java7='export JAVA_HOME=$JAVA_7_HOME'alias java8='export JAVA_HOME=$JAVA_8_HOME'alias java12='export JAVA_HOME=$JAVA_12_HOME'# default to Java12java12 版本切換 12345678910# =============== 版本切換 ===============java6java -versionjava7java -versionjava8java -versionjava12java -version Mavan1brew install maven Python12345678910111213# install Homebrewruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"# at the button of bash profileexport PATH=\"/usr/local/opt/python/libexec/bin:$PATH\"# install pythonbrew install pythonbrew install python@2python --version # or python -Vpython2 --versionpython3 --version Util1npm install -g hexo-cli Alfred - Productivity App for macOS Magnet – Window manager for Mac CheatSheet - Know your short cuts Mowglii - Itsycal for Mac Page Redirection htop - an interactive process viewer for Unix cjbassi/gotop ThemeJohnCoates/Aerial Reference Installing Python 3 on Mac OS X Installing Python 2 on Mac OS X Bad Interpreter","link":"/tools/mac/index.html"}],"posts":[{"title":"Git 手冊","text":"設定指令設定123456789101112131415161718192021222324252627git config --list # git config -l# accountgit config --global user.name \"[name]\"git config --global user.email \"[email address]\"# pushgit config --global push.default simple# coregit config --global editor vimgit config --global ignoreCase false# colorgit config --global color.diff autogit config --global color.status autogit config --global color.branch autogit config --global color.log auto# aliasgit config --global alias.co checkoutgit config --global alias.br branchgit config --global alias.aa add --allgit config --global alias.ci commitgit config --global alias.st statusgit config --global alias.lg \"log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cblueby %an %Cgreen(%cr)%Creset'\"git config --global alias.lg \"log --graph --pretty=format:'%C(reverse ul cyan)%h%Creset -%C(yellow)%d%Creset %C(ul)%s%Creset %C(dim white)&lt;%an&gt;%Creset %Cgreen(%cr)%Creset %ci'\" 編輯 ~/.gitconfig1234567891011121314151617181920[user] name = your_user_name email = account@domain.com[core] editor = vim ignorecase = false[push] default = simple[color] diff = auto status = auto branch = auto log = auto[alias] co = checkout br = branch aa = add --all ci = commit st = status lg = log --graph --pretty=format:'%C(reverse ul cyan)%h%Creset -%C(yellow)%d%Creset %C(ul)%s%Creset %C(dim white)&lt;%an&gt;%Creset %Cgreen(%cr)%Creset %ci' 基本使用 .gitignore 忽略不需要的檔案 .gitkeep 保留空資料夾 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455git initgit statusgit status -sgit add &lt;pathspec&gt;... # 新增特定檔案 to staging: file name, *.extension, folde namegit add . # 新增所有檔案 to staginggit commit -m '[commit messgae]'git commit -am '[commit messgae]' # 自動 stage 被修改, 刪除的檔案git commit --amend # 修改最後一次的 commitgit commit --amend -m '[commit messgae]' # modify last commitgit rm &lt;file&gt;...git rm --cached &lt;file&gt;... # 刪除檔案git rm --cached -r . # 所有 staging 檔案 to untrackedgit mv &lt;file_name_old&gt; &lt;file_name_new&gt; # 重新命名檔案git mv file_from file_to # git mv &lt;options&gt;... &lt;args&gt;...git checkout master &lt;file_name&gt; # 從 master 取回檔案git diffgit diff --staged # git diff --cached# 提交空目錄mkdir imgcd imgtouch .gitkeep# 清除 untrack file or foldergit clean -fgit clean -df# 查看 loggit show 9083cdc # git show &lt;object&gt;...git blame wtf.html # git blame index.htmlgit loggit log --graph --onelinegit log --statgit log --pretty=onelinegit log -p README.mdgit log -p -2git log --pretty=format:\"%h %s\" --graphgit log --since=2.weeksgit log -Sfunction_name # git log -S&lt;string&gt; -G&lt;regex&gt;git log --pretty=\"%h - %s\" --author=gitster --since=\"2008-10-01\" --before=\"2008-11-01\" --no-mergesgit reflog # 所有的 local 歷史紀錄，遠端不會有，存放在 ~/.git/logs/refs/git log -g # reflog 詳細版git reset HEAD README.md # Unstageinggit checkout -- README.md # Unmodofying, 修改紀錄會消失！！！！！git clone &lt;GIT URL&gt;git remote -vgit remote add pb &lt;GIT URL&gt;git fetch pb # git fetch &lt;remote&gt;git remote show origingit remote rename pb paulgit remote remove paul Git Branching 特性：輕量化、快速切換、鼓勵多合併(commit 圖解請參閱 Git Branching) 預設分支：master 目前分支的指標： HEAD 123456789101112131415161718192021222324252627282930313233343536373839404142git branch -lgit branch -rgit branch -vgit branch -vv# 建立分支git branch &lt;newbranchname&gt;git checkout -b &lt;newbranchname&gt; # 等同 git branch &lt;newbranchname&gt; &amp;&amp; git checkout &lt;newbranchname&gt;# 建立分支 - 針對節點git branch &lt;newbranchname&gt; &lt;object&gt;git checkout -b &lt;newbranchname&gt; &lt;object&gt;# 切換分支git branch &lt;branchname&gt;git checkout &lt;branchname&gt;# 合併分支git merge &lt;branchname&gt;# 刪除分支git branch -d &lt;branchname&gt; # --deletegit branch -D &lt;branchname&gt; # 強制刪除 --delete --forcegit branch --mergedgit branch --no-mergedgit branch --no-merged master# remotegit ls-remote [remote]git remote show [remote]git fetch &lt;remote&gt;git remote addgit push &lt;remote&gt; &lt;branch&gt;# trackinggit checkout -b &lt;branch&gt; &lt;remote&gt;/&lt;branch&gt; # or git checkout serverfixgit branch -u origin/serverfix# pullinggit pull # git fetch &amp;&amp; git merge## delete remote branchgit push origin --delete serverfix Rebase不要 rebase 其他人正在進行的 branch 1234git checkout &lt;branchname&gt;git rebase mastergit rebase &lt;basebranch&gt; &lt;topicbranch&gt;git pull --rebase Git Branching - Remote1234567891011121314151617181920212223# pushgit push origin serverfixgit fetch origingit checkout -b serverfix origin/serverfix# trackgit checkout --track origin/serverfixgit checkout serverfixgit checkout -b sf origin/serverfixgit branch -vvgit fetch --all; git branch -vv# pullgit pull# deletegit push origin --delete serverfix# create empty branchgit checkout --orphan empty-branchgit rm -rf .git commit --allow-empty -m \"root commit\"git push origin empty-branch Git on the ServerHosting 12345678910# remote 操作git clone git@github.com:[username]/[repo].gitgit push -ugit remote add [name] git@github.com:[username]/[repo].gitgit remotegit remote -vgit remote show origingit pull [name]git remote rm [name] 產生 SSH Public Key ssh-keygen: Linux/macOS 內建、Git for Windows passphrase: 使用 key 時需要密碼就填入(ssh-keygen -o 可防暴力密碼破解)，不需要留空即可 id_rsa or id_dsa: private key id_rsa.pub or id_dsa.pub: public key public key 新增至 Github 123456cd ~/.sshssh-keygen -t rsa -b 4096 -C \"[email address]\"cat id_rsa.pub# 測試 Github public keyssh -T git@github.com 疑難雜症12# git help &lt;verb&gt;git help config 修改歷史紀錄12345git rebase -i &lt;earliercommit&gt;git commit --amend --author=\"Author Name &lt;email@address.com&gt;\"git commit --amend -m=\"message\"git rebase --continuegit push -f https://stackoverflow.com/questions/3042437/how-to-change-the-commit-author-for-one-specific-commit 參考資源 GIT CHEAT SHEET Git - pretty-formats Documentation for log","link":"/git-handbook/"},{"title":"打字學習","text":"XOXO 目標：高 WPM 的盲打 目標 精準 速度 工具 TypingClub Google 帳號登入即可 Typing.com Google 帳號登入即可 RapidTyping 單機版","link":"/learn-to-type/"},{"title":"Hexo - 靜態網頁框架","text":"安裝需求: Git, Node 12345# 安裝 Hexonpm install -g hexo-cli# 佈署npm install hexo-deployer-git --save 目錄及檔案配置 _config.yml: 設定檔 scaffolds: 樣板 source: 文章 _draft: 草稿 _post: 文章 themes: 主題 文章 設定檔 new_post_name 改為 :year-:month-:day-:title.md 比教方便管理 layout: post, page, draft，另外可以在 scaffolds 目錄新增樣板，讓風格一致 Front-matter 分類和標籤只有 post 可以使用 標籤外掛（Tag Plugins）: 可插入特定內容，如：jsFiddle, Gist 等等 12345678hexo new [layout] &lt;title&gt;hexo new [layout] &lt;title&gt; &lt;scaffolds&gt;# 發布草稿: 從 source/_drafts 移動到 source/_postshexo publish [layout] &lt;title&gt;# 查看整文章的數量: page, post, route, tag, categoryhexo list &lt;type&gt; 佈署Git將產生在 .deploy_git 目錄下的檔案 force push 到設定檔指定的 repo 12345deploy: type: git repo: git@github.com:vincentliu99999/vincentliu99999.github.io.git branch: master message: \"Site updated: {{ now('YYYY-MM-DD HH:mm:ss') }}\" 佈景主題ICARUS設定檔: theme/icarus/_config.yml favicon rss logo navbar footer article.highlight article.thumbnail comment widgets toc 指令1234567891011121314151617181920212223# 初始化hexo init &lt;folder&gt;cd &lt;folder&gt;npm install# 產生文章hexo new 文章標題# 產生靜態檔案hexo generate# 啟動伺服器 預設是 http://localhost:4000/hexo server # hexo shexo s --draft # 包含草稿# publishhexo clean # 清除快取 db.json, /public/*hexo generate # hexo ghexo depoly # hexo d# 產生檔案加佈署(任一指定即可)hexo generate --deploy # hexo g -dhexo deploy --generate # hexo d -g","link":"/hexo-note/"},{"title":"DynamoDB 資料匯出工具","text":"由於 DynamoDB 僅提供匯出 CSV 的選項，但是編輯的時候只能用 JSON…剛好找到了 export-dynamodb 可匯出格式: CSV, JSON 12345678# 安裝pip install export-dynamodb# 未指定 output file name, 就會用 table nameexport-dynamodb -t TABLE_NAME -f csvexport-dynamodb -t TABLE_NAME -f jsonexport-dynamodb -t TABLE_NAME -f csv -o output.csvexport-dynamodb -t TABLE_NAME -f json -o output.json","link":"/dynamodb-exporter/"},{"title":"React 手冊","text":"Component 展開多個 Object1&lt;component {...{ ...objA, ...objB }} /&gt; Higher-Order Components(HOC)Render PropsContext工具 create-react-app 快速建立 React 專案 Lifecycle Simulators 各個 lifecycle 能做極不能做的 TODO memoization helper","link":"/react-handbook/"},{"title":"SSH 不帶入本機語系設定","text":"最近遇到機器重啟後，email 發送亂碼的問題 經查詢後發現是因為該機器是 zh_TW.big5 語系，有人本機設定語系為 zh_TW.UTF-8，使用 sudo s- 進入後重啟所導致 以下方法可以不把本機語系傳到遠端 1vi /etc/ssh/ssh_config 註解以下設定 SendEnv LANG LC_* 測試流程: 設定本機語系後，ssh 至 remote，再看看語系設定 1234# 設定本機語系LANG=\"en_IN.utf8\" &amp;&amp; export LANGLANG=\"zh_TW.big5\" &amp;&amp; export LANGLANG=\"zh_TW.UTF-8\" &amp;&amp; export LANG 12locale # 目前語系設定locale -a # 列出支援的語系 參考資料 How do not pass locale through ssh OS X Terminal: -bash: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8): No such file or directory Fix 3 Ways to Fix SSH Locale Environment Variable Error 如果你要一台一台更新機器的話… How To Restart SSH Service under Linux / UNIX","link":"/ssh-forward-locale-setting/"},{"title":"serverless-aws-handbook","text":"整理 serverless 運用 AWS Provider 開發 Lambda 環境準備&amp;介紹 AWS - Installation 安裝 Node.js 安裝 Serverless npm install -g serverless 設定 AWS credentials AWS - Introduction 協助開發、部署 Lambda 管理 code, infrastructure by CloudFormation 支援多種程式語言 主要概念 functions: AWS Lambda function events: 用來 trigger Lambda resources: Lambda 所需的 infrastructure services: project 單位 plugins serverless.yml 可用的屬性 Quick Starthttps://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-using-debugging.html Install User GuideFunctions handler 指向檔案及 module function 預設繼承 provider 屬性或是自行指定 function 可用 array file 來分別管理 Permission 利用 provider.iamRoleStatements 設定 IAM Role 使用現有 IAM Role provider.role Environment Variables key-value paris function, override provider provider Tags key/value tags function, override provider provider Variables 取代 serverless.yml 中的設定值，例如提供 secrets, 運用 multiple stage，語法 如 ${variableSource} 變數來源 Serverless {sls:variableSource} 環境變數 ${env:SOME_VAR} CLI Options ${opt:some_option} 外部檔案 YAML, JSON file SSM Parameter Store: ${ssm:/path/to/param} Secrets Manager 參照 AWS Pseudo Parameters 字串變數作為布林值 Credentials serverless 需要能 access AWS resource 的權限，已進行操作管理 註冊 AWS Account(廢話) 建立 IAM user, access key，啟用 Programmatic access Serverless Framework Dashboard，運用 AWS Access Roles 並使用 1 小時後就失效的 access key 無腦方式直接賦予 IAM user AdministratorAccess 權限 最小權限化可參考 gist 使用 access key export AWS_ACCESS_KEY_ID, export AWS_SECRET_ACCESS_KEY AWS Profiles serverless config credentials aws-cli aws configure 會以 INI 格式儲存在 ~/.aws/credentials IAMServerless 會自動建立 所有 function 共用的 IAM Role，可自行修改或建立 function 獨立用的 IAM Role The Default IAM Role create, write CloudWatch logs VPC 有設定時，就能跟 VPC 內的 resource 都通 所有 service 共用的 role 設定在 provider.iamRoleStatements 或 provider.iamManagedPolicies 可用運 CloudFormation 語法 Custom IAM Roles provider 定義的 iamRoleStatements 不再使用 自定義的 role 可用用在 provider 或個別 function function 沒定義 role 時，會使用 provider.role function 有定義 role 時，會覆寫 provider.role 每個 function 都有指定 role 時，預設的 role, policy 將不會產生 DeployDeploy Allupdate function by serverless.yml, translate syntax to CloudFormation 建立 CloudFormation template 建立 S3 Bucket, 預設 AES256 encryption function code package to zip files 比對檔案 hash, 有不同才會進行 deploy zip file 上傳到 S3 Bucket 建立 CloudFormation 所需 resources 更新 CloudFormation stack 發布新版的 function Deploy Function因不仰賴 CloudFormation，較為快速 package function into zip file 比對檔案 hash, 有不同才會進行 deploy zip file 上傳到 CloudFormation stack 指定的 S3 Bucket AWS EventsSchedule 語法可參閱 Schedule Expressions for Rules corn rate 預設 enable 可給予 name, description SNS lambda 會在訊息傳到 topic 後呼叫 可在不同 function 使用相同 topic 用 ARN 指定現有 topic，可運用 CloudFormation function 組合 topic 在 serverless.yml 中時，要用 Fn::Ref 或 !Ref 取得 ARN DynamoDB Streams table 資料新增、修改時，觸發 lambda stream 僅會掛上已存在的 stream，serverless 不會新增新的 stream 設定 batchSize startingPosition batchWindow maximumRetryAttempts parallelizationFactor enable CLI AWS - deploy Createnodejs, python, python3, java Templates Reference Having an event only for prod stage serverless/examples","link":"/serverless-aws-handbook/"}],"tags":[{"name":"aws cloudformation ec2","slug":"aws-cloudformation-ec2","link":"/tags/aws-cloudformation-ec2/"},{"name":"aws","slug":"aws","link":"/tags/aws/"},{"name":"docker container","slug":"docker-container","link":"/tags/docker-container/"},{"name":"markdown","slug":"markdown","link":"/tags/markdown/"},{"name":"SSH","slug":"SSH","link":"/tags/SSH/"},{"name":"lambda","slug":"lambda","link":"/tags/lambda/"},{"name":"aws cloudformation","slug":"aws-cloudformation","link":"/tags/aws-cloudformation/"}],"categories":[{"name":"handbook","slug":"handbook","link":"/categories/handbook/"},{"name":"static site generator","slug":"static-site-generator","link":"/categories/static-site-generator/"},{"name":"aws","slug":"aws","link":"/categories/aws/"},{"name":"linux","slug":"linux","link":"/categories/linux/"}]}